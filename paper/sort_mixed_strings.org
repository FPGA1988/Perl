#+TITLE: 对混合字符串排序
#+AUTHOR: GRC(扬眉剑)
#+LATEX_CLASS: ctexart
 
* github地址：


所有后续更新都在github上进行，其他地方不做同步。
发现任何错误，或者不当的地方，请先到github查看是否改正。
如果没有请留言。或者邮件交流：rongchaogao@gmail.com

* 前言
对一串字符或者数字我们可以用sort函数轻松的排序。
但是如果有这样一种情况：
我们要对一些字符串排序，但是我们希望根据字符串中的数字来排序。
这应该如何实现呢？

如果我们简单的用sort来排序，那么我们得到的是按照字符串排序的。
你可能想到了我们需要把字符串中的数字提取出来，然后用来排序。

#+BEGIN_SRC perl
  use strict;
  use warnings;
  use 5.010;
   
  my @x = qw(foo_11 bar_2 moo_3);
  say join " ", sort @x;
  
  ## result
  ## bar_2 foo_11 moo_3
#+END_SRC

** 用substr提取数字
为了能够使用字符串中的数字来排序，我们需要将其中的数字提取出来。
按照上面的例子，我们发现上面字符串有一个共同的特征。也就是4个字符
后面跟着一个数字。
这种情况下，我们可以直接用substr来提取数字。
#+BEGIN_SRC perl
  use strict;
  use warnings;
  use 5.010;
   
  my @x = qw(foo_11 bar_2 moo_3);
   
  my @y = sort { substr($a, 4) <=> substr($b, 4)  } @x;
   
  say join " ", @y;
  
  # result
  # bar_2 moo_3 foo_11
#+END_SRC
但是很明显我们的现实情况没有这么理想。上面的程序不具有通用性。
如果数字的前后有着不同的字母，那么应该怎么办呢？
比如：
#+BEGIN_EXAMPLE
  my @x = qw(foo_11 bar_2_bar text_3);
#+END_EXAMPLE
如果我们还用上面的程序，那么我们会得到报错信息。
#+BEGIN_EXAMPLE
  Argument "2_bar" isn't numeric in numeric comparison (<=>)
#+END_EXAMPLE

这种方式行不通，那么我们可以通过正则表达式来提取数字。
但是我们却需要创建一个列表上下文。所以下面这个例子中，我们需要把$number
放在括号中。
#+BEGIN_SRC perl
  use strict;
  use warnings;
  use 5.010;
   
  my $str = 'bar_2_bar';
  my ($number) = $str =~ /(\d+)/;
  say $number;
  
  # result
  # 2
#+END_SRC
上面的输出结果为2.
但是飞船操作符(<=>)的两遍需要的是标量上下文。那么我们如何在标量环境中
提取到数字呢？
我们可以通过在飞船操作符两侧借用数组切片来实现。

#+BEGIN_SRC perl
  my ($number) = $str =~ /(\d+)/;
   
  my $number = ($str =~ /(\d+)/)[0];
#+END_SRC
把上面的内容整合一下，我们会得到下面的程序。
#+BEGIN_SRC perl
  use strict;
  use warnings;
  use 5.010;
   
  my @x = qw(foo_11 bar_2_bar text_3);
  say join " ", sort @x;
   
  my @y = sort { ($a =~ /(\d+)/)[0] <=> ($b =~ /(\d+)/)[0] } @x;
   
  say join " ", @y;
  
  # result 
  # bar_2_bar text_3 foo_11
#+END_SRC
** 数字缺失
如果在很多字符串中，有一个没有数字，那么我们运行程序的时候会得到大量的报错。
Use of uninitialized value in numeric comparison。因为没有数字，
我们可以进行变通，比如我们规定没有数字的时候，我们把这个字符串的数字部分
看成0，排在最前面，或者最后面。
#+BEGIN_SRC perl
  my @y = sort { (($a =~ /(\d+)/)[0] || 0) <=> (($b =~ /(\d+)/)[0] || 0) } @x;
#+END_SRC
** 速度问题
有人也指出，正则引擎是很慢的，那么我们可以通过使用Schwartzian变换来加速。
如果数组有多有5个元素，那么用Schwartzian transform 更快。
